/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>

/* stick key */
&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define NAV_L   3
#define ADJ_L   4


/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";


        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            // hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };
        tmt: thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        blt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                   &kp Q        &kp W         &kp E        &kp R        &kp T     /*&  &*/    &kp Y              &kp U               &kp I                 &kp O         &kp P
                   &lhm LSHFT A &blt NAV_L S  &lhm LSHFT D &lhm LALT F  &kp G     /*&  &*/    &kp H              &rhm LALT J         &rhm RSHFT K          &rhm LCTRL L  &rhm RGUI SEMI
                   &kp Z        &kp X         &kp C        &kp V        &kp B     /*&  &*/    &kp N              &kp M               &kp COMMA             &kp DOT       &kp FSLH
				 /*&                &*/     &kp LCTRL    &lhm LGUI SPC    &blt SYM_L ESC  /*&  &*/  &blt NUM_L BSPC  &blt NAV_L RET  &kp RALT  /*&             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp TILDE    &kp RA(E)     &kp LBRC     &kp RBRC     &trans     /*&  &*/    &kp RA(N6)   &kp RA(SQT) &kp RA(DQT)  &kp RA(GRAVE) &kp RA(COMMA)
                   &kp LSHFT    &trans        &kp LPAR     &kp RPAR     &trans     /*&  &*/    &kp CARET    &kp SQT      &kp DQT      &kp GRAVE    &kp BSLH
                   &trans       &trans        &kp LBKT     &kp RBKT     &trans     /*&  &*/    &trans       &trans       &trans       &trans       &trans
				 /*&                    &*/           &trans       &trans       &trans     /*&  &*/    &trans       &trans       &trans       /*&           &*/
			>;
		};

		num_layer {
			bindings = <
                   &trans       &trans       &trans       &trans       &trans      /*&  &*/    &kp EQUAL    &kp N7       &kp N8       &kp N9       &kp SQT
                   &kp LGUI     &kp LCTRL    &kp LSHFT    &kp LALT     &trans      /*&  &*/    &kp MINUS    &kp N4       &kp N5       &kp N6       &kp N0
                   &trans       &trans       &trans       &trans       &trans      /*&  &*/    &kp ASTRK    &kp N1       &kp N2       &kp N3       &kp DOT
				 /*&                   &*/           &trans       &trans       &trans      /*&  &*/    &trans       &trans       &trans       /*&             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &trans       &trans       &trans       &trans       &trans      /*&  &*/    &kp PG_UP    &kp HOME     &kp UP       &kp END      &trans
                   &kp LGUI     &kp LCTRL    &kp LSHFT    &kp LALT     &trans      /*&  &*/    &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT    &trans
                   &trans       &trans       &trans       &trans       &trans      /*&  &*/    &kp DEL      &trans       &trans       &trans       &trans
				 /*&                    &*/          &trans       &trans       &mo ADJ_L   /*&  &*/    &trans       &trans       &trans       /*&           &*/
			>;
		};

		adj_layer {
			bindings = <
                   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 /*&  &*/    &kp F1       &kp F2       &kp F3       &kp F4       &kp F5
                   &trans       &trans       &trans       &out OUT_USB &out OUT_BLE /*&  &*/    &kp F6       &kp F7       &kp F8       &kp F9       &kp F10
                   &bt BT_CLR   &bt BT_PRV   &bt BT_NXT   &trans       &trans       /*&  &*/    &kp F11      &kp F12      &trans       &trans       &trans
				 /*&                    &*/          &trans       &trans       &trans       /*&  &*/    &trans       &trans       &trans       /*&            &*/
			>;
		};

	};
};
